<?phprequire_once(URI_CLASS.'/Medoo.php');use Medoo\Medoo;class Database{    private $db;    public function init()    {        $this->db = new Medoo([            // required            'database_type' => 'mysql',            'database_name' => DB_NAME,            'server' => DB_HOST,            'username' => DB_USER,            'password' => DB_PASS,            'charset' => 'utf8',        ]);    }    public function error() {        return $this->db->error();    }    // CRUD COMMAND    public function createCommand($data) {        if (isset($data['name']) && isset($data['description']) && isset($data['action']) && !empty($data['name']) && !empty($data['description']) && !empty($data['action'])) {            if ($this->db->insert('command', $data)) {                return $this->db->id();            } else {                return null;            }        } else {            return null;        }    }    public function readCommand($id = null) {        if (!is_null($id)) {            return $this->db->select('command', '*', [                'id' => $id            ]);        } else {            return $this->db->select('command', '*');        }    }    public function updateCommand($id, $data) {        return $this->db->update("command", $data,['id' => $id]);    }    public function deleteCommand($id) {        return $this->db->delete('command', [            'id' => $id        ]);    }    // CRUD PERIPHERAL    public function peripheralExist($ip) {        return $this->db->count('peripheral', [            'ip_address' => $ip        ]);    }    public function createPeripheral($data) {        if ($this->db->insert('peripheral', $data)) {            return $this->db->id();        } else {            return null;        }    }    public function readPeripheral($id = null) {        if (!is_null($id)) {            return $this->db->select('peripheral', '*', [                'id' => $id            ]);        } else {            return $this->db->select('peripheral', '*');        }    }    public function updatePeripheral($id, $data) {        return $this->db->update("peripheral", $data,['id' => $id]);    }    public function updatePeripheralIpFromMac($mac, $ip) {        return $this->db->update("peripheral", ['ip_address' => $ip],['mac_address' => $mac]);    }    public function deletePeripheral($id) {        return $this->db->delete('peripheral', [            'id' => $id        ]);    }    // CRUD USER    public function connectUser($username,$password) {        return $this->db->select('user',['id','username'], [            'AND' => [                'username' => $username,                'password' => $password            ]        ]);    }    public function createUser($data) {        if ($this->db->insert('user', $data)) {            return $this->db->id();        } else {            return null;        }    }    public function readUser($id = null) {        if (!is_null($id)) {            return $this->db->select('user', '*', [                'id' => $id            ]);        } else {            return $this->db->select('user', '*');        }    }    public function updateUser($id, $data) {        return $this->db->update("user", $data,['id' => $id]);    }    public function deleteUser($id) {        return $this->db->delete('user', [            'id' => $id        ]);    }    // CRUD ROBOT    public function updateRobotIpFromMac($mac, $ip) {        return $this->db->update("robot", ['ip_address' => $ip],['mac_address' => $mac]);    }    public function createRobot($data) {        if ($this->db->insert('robot', $data)) {            return $this->db->id();        } else {            return null;        }    }    public function readRobot($id = null) {        if (!is_null($id)) {            return $this->db->select('robot', '*', [                'id' => $id            ]);        } else {            return $this->db->select('robot', '*');        }    }    public function updateRobot($id, $data) {        return $this->db->update("robot", $data,['id' => $id]);    }    public function deleteRobot($id) {        return $this->db->delete('robot', [            'id' => $id        ]);    }}