<?phpuse \Firebase\JWT\JWT;// pour hash le mot de passefunction crypt_Password( $pwd ) {	return sha1('7@4^{71:6[65%1~)' . $pwd . '>2@%4$995-3>4[_2');}// pour recuperer la table arp (fonctionne que sur le rasperry)function get_arp_table() {    $arp = null;    switch (PHP_OS) {        case 'WINNT': // STUB FOR WINDOWS ...            $arp = "android-96ebf7100f1e1603 (10.0.0.19) at 68:05:71:cc:5a:30 [ether] on wlan0\nDESKTOP-E2FP7N0 (10.0.0.20) at 10:4a:7d:45:d4:b3 [ether] on wlan0\nDESKTOP-ISHQPQD (10.0.0.18) at d0:57:7b:0e:2d:65 [ether] on wlan0\nPCPortFabien (10.0.0.16) at b8:ee:65:8c:c6:c3 [ether] on wlan0\nandroid-d9d33cb71fc2d0b4 (10.0.0.17) at 68:05:71:cc:55:f8 [ether] on wlan0\nDESKTOP-E1A6BMQ (10.0.0.7) at 00:28:f8:06:32:7c [ether] on wlan0\npolette (10.0.0.15) at bc:30:7d:74:9e:50 [ether] on wlan0\nRomain-PC (10.0.0.11) at 24:0a:64:4a:8d:b8 [ether] on wlan0";            break;        default:            shell_exec('sudo rm '.URI_SCRIPT.'arp.dat');            shell_exec('sudo arp -a >> '.URI_SCRIPT.'arp.dat');            $arp = file_get_contents(URI_SCRIPT.'arp.dat', FILE_USE_INCLUDE_PATH);            break;    }    // parsing du fichier !    $adress = [];    foreach (explode("\n", $arp) as $k => $d) {        if(preg_match("#(.+) <incomplete> (.+)#", $d)) {            $adress[$k]["mac"] = "";        } else {            $adress[$k]["mac"] = trim(preg_replace("#(.+) at (.+) \[ether\] on (.+)#", "$2", $d));        }        $adress[$k]["ip"] = trim(preg_replace("#(.+)\((.+)\) at (.+)#", "$2", $d));    }    // on met a jour parcours de toutes les addresses et pour les addresses qui match on met a jour l'ip !    global $DB;    foreach ($adress as $k => $d) {        if (!empty($d['mac']) && !is_null($d['mac'])) {            $DB->updatePeripheralIpFromMac($d['mac'], $d['ip']);            $DB->updateRobotIpFromMac($d['mac'], $d['ip']);        }    }}function peripheral_can_fetch_data(){    global $DB;    $count = $DB->peripheralExist(get_client_ip());    if ($count == 0) {        die(json_encode([            'message' => 'Votre périphérique n\'est pas autorisé !'        ]));    }}function get_client_ip(){    $ip = null;    if (!empty($_SERVER['HTTP_CLIENT_IP'])) {        $ip = $_SERVER['HTTP_CLIENT_IP'];    } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {        $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];    } else {        $ip = $_SERVER['REMOTE_ADDR'];    }    return $ip;}function verify_token_valid() {    $headers = getallheaders();    if (isset($headers['Authorization']) && !is_null($headers['Authorization'])) {        $token = explode(' ',$headers['Authorization']);    } else if (isset($headers['authorization']) && !is_null($headers['authorization'])) {        $token = explode(' ',$headers['authorization']);    } else {        $token = null;    }    try {        $decoded = JWT::decode($token[1], JWT_KEY, ['HS256']);        return null;    } catch (\Exception $e) {        return $e->getMessage();    }}